/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Axle from "../../api";
import * as core from "../../core";

export const Policy: core.serialization.ObjectSchema<serializers.Policy.Raw, Axle.Policy> = core.serialization.object({
    id: core.serialization.string(),
    account: core.serialization.string(),
    type: core.serialization.lazy(async () => (await import("..")).PolicyType),
    carrier: core.serialization.string(),
    policyNumber: core.serialization.string(),
    isActive: core.serialization.boolean(),
    effectiveDate: core.serialization.string(),
    expirationDate: core.serialization.string(),
    address: core.serialization.lazyObject(async () => (await import("..")).Address),
    coverages: core.serialization.list(core.serialization.lazyObject(async () => (await import("..")).Coverage)),
    properties: core.serialization.list(core.serialization.lazyObject(async () => (await import("..")).Property)),
    insureds: core.serialization.list(core.serialization.lazyObject(async () => (await import("..")).Insured)),
    thirdParties: core.serialization.list(core.serialization.lazyObject(async () => (await import("..")).ThirdParty)),
    createdAt: core.serialization.string(),
    modifiedAt: core.serialization.string(),
    refreshedAt: core.serialization.string(),
});

export declare namespace Policy {
    interface Raw {
        id: string;
        account: string;
        type: serializers.PolicyType.Raw;
        carrier: string;
        policyNumber: string;
        isActive: boolean;
        effectiveDate: string;
        expirationDate: string;
        address: serializers.Address.Raw;
        coverages: serializers.Coverage.Raw[];
        properties: serializers.Property.Raw[];
        insureds: serializers.Insured.Raw[];
        thirdParties: serializers.ThirdParty.Raw[];
        createdAt: string;
        modifiedAt: string;
        refreshedAt: string;
    }
}
